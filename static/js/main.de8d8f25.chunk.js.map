{"version":3,"sources":["serviceWorker.js","components/searchbox/SearchBox.js","components/card/Card.js","components/cardlist/CardList.js","components/scroll/Scroll.js","containers/errorboundary/ErrorBoundary.js","containers/app/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","_ref","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","id","name","email","src","concat","alt","CardList","robots","map","user","i","card_Card","key","Scroll","props","style","overflowY","borderTop","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","message","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","length","searchbox_SearchBox","scroll_Scroll","errorboundary_ErrorBoundary","cardlist_CardList","React","connect","searchReducer","requestReducer","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRequest","logger","createLogger","rootReducer","combineReducers","returnState","arguments","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de8d8f25.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search members'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../card/Card';\n\nconst CardList = ({robots}) => {\n    return(\n        <div>\n            {\n                robots.map((user, i) => {\n                    return(\n                        <Card \n                            key={i} \n                            id={user.id} \n                            name={user.name} \n                            email={user.email} \n                        />\n                    );\n                })\n            }\n        </div>      \n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY: 'scroll', borderTop: '2px solid #19a974', height:'800px'}}>\n            {props.children}\n        </div>\n        \n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, message){\n        this.setState({hasError:true});\n    }\n\n    render(){\n        if (this.state.hasError) {\n            return <h1>Oooops, there went something wrong.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport { connect } from 'react-redux'; \nimport SearchBox from '../../components/searchbox/SearchBox';\nimport CardList from '../../components/cardlist/CardList';\nimport Scroll from '../../components/scroll/Scroll';\nimport ErrorBoundary from '../errorboundary/ErrorBoundary';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../../actions'\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchReducer.searchField,\n        robots: state.requestReducer.robots,\n        isPending: state.requestReducer.isPending,\n        error: state.requestReducer.error\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => {\n            dispatch(setSearchField(event.target.value))\n        },\n        onRequestRobots: () => dispatch(requestRobots())\n    };\n};\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render(){\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        let returnElement;\n        if (!robots.length && isPending) {\n            returnElement = <h1 className='tc'>Loading...</h1>;\n        } else {\n            returnElement = <div className='tc'>\n                <h1 className='f1'>The Widget Team</h1>\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>;\n        }\n        return returnElement;\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => { return response.json(); })\n    .then((data) => { dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });})\n    .catch(error => { dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });});\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nexport const searchReducer = (state=initialStateSearch, action={}) => {\n    let returnState;\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n        returnState = Object.assign({}, state, {searchField:action.payload});\n            break;\n        default:\n            returnState = state;\n    }\n    return returnState;\n};\n\nconst initialStateRequest = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const requestReducer = (state=initialStateRequest, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/app/App';\nimport { searchReducer, requestReducer } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchReducer, requestReducer});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}